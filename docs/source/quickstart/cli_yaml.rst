Quickstart: command-line interface with YAML
==============================================

.. meta::

   :twitter:card: summary
   :twitter:site: @immuneml
   :twitter:title: immuneML quickstart: get started in the command line with YAML specification
   :twitter:description: See tutorials on how to run an immuneML quickstart in the command line with a YAML specification.
   :twitter:image: https://docs.immuneml.uio.no/_images/receptor_classification_overview.png

This tutorial will show you how to use immuneML for a simple machine learning analysis on an adaptive immune receptor repertoire (AIRR) dataset.
This example dataset consists of 100 synthetic immune repertoires (amino acid sequences generated by `OLGA <https://github.com/statbiophys/OLGA>`_), each containing 1000 CDR3 sequences.
In half the repertoires, the subsequence 'VLEQ' has been implanted in 5% of the CDR3 sequences to simulate a disease signal.
Using immuneML, we will encode the data as 3-mer frequencies and train a logistic regression model to predict the disease status of each repertoire
(i.e., whether the repertoire contains the disease signal 'VLEQ'), which is a binary classification problem.


Getting started using the command-line interface
-------------------------------------------------

This tutorial assumes that immuneML is already installed locally (see :ref:`Installing immuneML`).
We recommend :ref:`installing immuneML using a package manager <Install immuneML with a package manager>`.

Step 0: test run immuneML
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This is an optional step.
To quickly test out whether immuneML is able to run, try running the quickstart command:

.. code-block:: console

    immune-ml-quickstart ./quickstart_results/

This will generate a synthetic dataset and run a simple machine machine learning analysis on the generated data.
The results folder will contain two sub-folders: one for the generated dataset (:code:`synthetic_dataset`) and one for the results of the machine
learning analysis (:code:`machine_learning_analysis`). The files named specs.yaml are the input files for immuneML that describe how to generate the dataset
and how to do the machine learning analysis. The index.html files can be used to navigate through all the results that were produced.

Step 1: downloading the dataset
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

An archive containing the dataset used in this tutorial can be downloaded here: :download:`quickstart_data.zip <../_static/files/quickstart_data.zip>`.
It contains the following files:

- The 100 repertoire_<somenumber>.tsv, which are immune repertoire files in AIRR format. For details about the AIRR format, see the `AIRR documentation <https://docs.airr-community.org/en/stable/datarep/format.html>`_ and `this example file <https://galaxy.immuneml.uiocloud.no/datasets/2a4bf9d66c01414a/display/?preview=True>`_.

- A metadata.csv file. The metadata file describes which of the 100 repertoires are diseased and healthy, under the
  column named 'signal_disease' which contains the values True and False.
  For details about the metadata file, see :ref:`What should the metadata file look like?` and `this example file <https://galaxy.immuneml.uiocloud.no/datasets/dfa1565938e7b4c3/display/?preview=True>`_.

Step 2: writing the YAML specification
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Any immuneML analysis is described by a YAML specification file.
This file contains nested key-value pairs. Mandatory keywords with a specific meaning are :code:`styled like this`
in the text. Note that correct whitespace (not tab) indentation of the YAML file is important.

In this tutorial, we will only cover the essential elements of the YAML specification.
For a more complete introduction, see :ref:`How to specify an analysis with YAML`.

The YAML specification consists of:

- :code:`definitions` describing the analysis components.

  - :code:`datasets`: our data is in :ref:`AIRR` format, we need to provide the location of the repertoires and the metadata file.

  - :code:`encodings`: the data will be represented through a :ref:`k-mer frequency encoding <KmerFrequency>`.
    This means each repertoire is represented based on the frequency of subsequences of length k.
    For example, the sequence CSVQYF contains the 3-mers CSV, SVQ, VQY and QYF.

  - :code:`ml_methods`: we will use :ref:`logistic regression <LogisticRegression>` to classify
    the encoded immune repertoires.

  - Optionally, :code:`reports`: we will plot the :ref:`coefficients <Coefficients>` of the trained
    logistic regression model, to get more insight into what the model has learned.

- :code:`instructions` describing the type of analysis.

  - The :ref:`TrainMLModel` instruction is used to train one or more 'ML settings' (combinations of encodings and ML methods),
    and optimize the hyperparameters using nested cross-validation. We can set the parameters for the outer 'assessment' and
    inner 'selection' cross-validation loops.

The complete YAML specification for this analysis is shown below and can be downloaded here: :download:`quickstart.yaml <../_static/files/quickstart/cli/quickstart.yaml>`.
Make sure to change :code:`path/to/repertoires/` and :code:`path/to/metadata.csv` to the actual paths to the data on your local machine.

    .. collapse:: quickstart.yaml

        .. literalinclude:: ../_static/files/quickstart/cli/quickstart.yaml
           :language: yaml


Step 3: running the analysis
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Once the YAML specification has been saved to a file (for example: quickstart.yaml), the analysis can be run using the following steps:

#. Activate the virtual environment where immuneML is available.

#. Navigate to the directory where :code:`quickstart.yaml` was saved.

#. Run the following command:

.. code-block:: console

    immune-ml quickstart.yaml ./quickstart_results/


Step 4: understanding the results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The results folder contains a multitude of files and folders, which can most easily be navigated by opening :code:`./quickstart_results/index.html` in a browser.
This HTML page displays a summary of the analysis, the performance of the optimized ML model (click 'see details' to navigate further), and the report that plots the 25 top coefficients of
the trained logistic regression model. Notice how the coefficients with the highest values are associated with the k-mers 'VLE' and 'LEQ', which overlap with the implanted disease signal 'VLEQ', meaning the ML model learned the correct signal.

.. image:: ../_static/images/reports/coefficients_logistic_regression.png
   :alt: Coefficients report
   :width: 600

In the folder :code:`./quickstart_results/exported_models/` a .zip file can be found containing the configuration of the optimal ML settings, including settings for the encoding
and machine learning method. Using immuneML, these optimal ML settings can subsequently be applied to a new repertoire dataset with unknown disease labels.

The folder :code:`./quickstart_results/my_training_instruction/` contains all raw exported results of the TrainMLModel instruction including all ML model predictions and raw report results.

Finally, :code:`./quickstart_results/` contains the complete YAML specification file for the analysis and a log file.

What's next?
-------------------------------------------------

If you haven't done it already, it is recommended to follow the tutorial :ref:`How to specify an analysis with YAML`.
If you want to try running immuneML on your own dataset, be sure to check out :ref:`How to import data into immuneML`.
Other tutorials for how to use each of the immuneML Galaxy tools can be found under :ref:`Tutorials`.
You may also be interested in checking our :ref:`Use case examples` to see what else immuneML can be used for.
